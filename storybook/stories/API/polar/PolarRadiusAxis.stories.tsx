import React from 'react';
import { Label, PolarRadiusAxis, RadarChart, ResponsiveContainer } from '../../../../src';
import { EventHandlers } from '../props/EventHandlers';
import { getStoryArgsFromArgsTypesObject } from '../props/utils';
import { StorybookArgs } from '../../../StorybookArgs';
import { pageData } from '../../data';

const GeneralProps: StorybookArgs = {
  angle: {
    description: 'The angle of radial direction line to display axis text.',
    table: {
      type: { summary: 'number' },
      defaultValue: 0,
      category: 'General',
    },
  },
  type: {
    description: 'The type of axis.',
    options: ['number', 'category'],
    control: 'radio',
    table: {
      type: { summary: 'number | category' },
      defaultValue: 'number',
      category: 'General',
    },
  },
  allowDuplicatedCategory: {
    description: 'Allow the axis that has duplicated category or not when the type of axis is "category".',
    table: { type: { summary: 'Boolean' }, defaultValue: true, category: 'General' },
  },
  domain: {
    description: `Specify the domain of radius in a polar chart.
      And the length should be 2. And each element in the array
      can be a number, 'auto', 'dataMin' or 'dataMax'.
      If any element of domain is set to be 'auto',
      comprehensible scale ticks will be calculated,
      and the final domain of axis is generated by the ticks.
      If a function, receives '[dataMin, dataMax]', and must return a computed domain as '[min, max]'.s`,
    table: { type: { summary: 'Array | Function' }, defaultValue: [0, 'auto'], category: 'General' },
  },
  reversed: {
    description: 'If set to true, the ticks of this axis are reversed.',
    table: { type: { summary: 'boolean' }, defaultValue: false, category: 'General' },
  },
  label: {
    description: `If set a string or a number, default label will be drawn,
        and the option is content. If set a React element,
        the option is the custom react element of drawing label.
        If set a function, the function will be called to render customized label.`,
    control: 'text',
    table: { type: { summary: 'String | Number | ReactElement | Function' }, category: 'General' },
  },
  orientation: {
    description: 'The orientation of axis text.',
    table: { type: { summary: 'left | right | middle' }, defaultValue: 'right', category: 'General' },
  },
  axisLine: {
    description: `If false set, axis line will not be drawn.
    If true set, axis line will be drawn which have the props calculated internally.
    If object set, axis line will be drawn which have the props merged by the internal calculated props and the option.`,
    table: { type: { summary: 'boolean | Object' }, defaultValue: true, category: 'General' },
  },
  tick: {
    description: `If false set, ticks will not be drawn. If true set,
    ticks will be drawn which have the props calculated internally.
    If object set, ticks will be drawn which have the props merged by the internal calculated props and the option.
    If ReactElement set, the option can be the custom tick element. If set a function, the function will be called to render customized ticks.`,
    table: { type: { summary: 'Bool | Object | Element | Function' }, defaultValue: true, category: 'General' },
  },
  tickFormatter: {
    description: 'The function to formatting tick.',
    table: { type: { summary: 'number' }, category: 'General' },
  },
  tickCount: {
    description: `The count of axis ticks. Not used if 'type' is 'category'.`,
    table: { type: { summary: 'number' }, defaultValue: 5, category: 'General' },
  },
  stroke: {
    description: 'Color of axisLine and text.',
    control: 'color',
    table: {
      type: {
        summary: 'CSS color',
      },
      defaultValue: '#ccc',
      category: 'General',
    },
  },
};

export default {
  argTypes: {
    ...GeneralProps,
    ...EventHandlers,
  },
  component: PolarRadiusAxis,
};
const [surfaceWidth, surfaceHeight] = [600, 300];

export const API = {
  render: (args: Record<string, any>) => {
    return (
      <ResponsiveContainer width="100%" height={surfaceHeight}>
        <RadarChart width={surfaceWidth} height={surfaceHeight} data={pageData}>
          <PolarRadiusAxis {...args}>
            <Label position="outside" offset={20}>
              PolarRadiusAxis
            </Label>
          </PolarRadiusAxis>
        </RadarChart>
      </ResponsiveContainer>
    );
  },
  args: {
    ...getStoryArgsFromArgsTypesObject(GeneralProps),
    angle: 30,
    dataKey: 'uv',
    type: 'category',
  },
};
