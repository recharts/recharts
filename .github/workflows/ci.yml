# This workflow runs all CI steps within a single job.

name: Build and test

permissions:
  contents: read
  pull-requests: write

on:
  pull_request:
    branches:
      - main
  push:
    branches:
      - main

env:
  NODE_VERSION: 20.x
  PACKED_ARTIFACT_NAME: 'recharts-snapshot.tgz'

jobs:
  list_integration_tests:
    name: List Integration Test Directories
    runs-on: ubuntu-latest
    outputs:
      # Output the list of directories as a JSON array string
      directories: ${{ steps.set_matrix.outputs.directories }}
    steps:
      - name: Checkout Integration Tests Repository
        uses: actions/checkout@v4
        with:
          repository: recharts/recharts-integ

      - name: List Integration Test Directories
        id: set_matrix
        # This command finds all integration test directories
        # and formats them as a JSON array.
        run: |
          JSON_ARRAY=$(node list.js --ci --json)
          echo "Generated directory list: $JSON_ARRAY"
          echo "directories=$JSON_ARRAY" >> $GITHUB_OUTPUT

  build_test_pack:
    name: Build, Test, Pack
    runs-on: ubuntu-latest
    container:
      # Use the Playwright container to run tests, as recommended in https://storybook.js.org/docs/writing-tests/in-ci
      # Make sure to grab the latest version of the Playwright image
      # https://playwright.dev/docs/docker#pull-the-image
      image: mcr.microsoft.com/playwright:v1.55.1-jammy
    env:
      ENCRYPTED_CHROMATIC_TOKEN: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
      # /root home is required to allow Firefox to run in the container
      HOME: /root
    outputs:
      # Output the *name* of the generated tgz file (relative to RECHARTS_PATH)
      # The actual file will be passed via artifact
      tgz_name: ${{ steps.pack_library.outputs.tgz_name }}
    steps:
      - name: Checkout Recharts Repository
        uses: actions/checkout@v4
        with:
          # Chromatic needs access to full git history
          # see https://www.chromatic.com/docs/github-actions/
          fetch-depth: 0

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          # Cache depends on the lock file within the checked-out path
          cache-dependency-path: 'package-lock.json'

      - name: Install Dependencies
        run: npm ci

      - name: Check Playwright versions
        run: npm run check-playwright-versions

      - name: Install dependencies for the website
        working-directory: www
        run: npm ci

      - name: Build main lib
        run: npm run build

      - name: Build website
        working-directory: www
        run: npm run build

      - name: Unit Tests
        run: npm run test-coverage

      - name: Typecheck
        run: npm run check-types

      - name: Lint
        run: npm run lint

      - name: Storybook doctor
        run: npm run storybook-doctor

      - name: Storybook Test
        run: npm run test-storybook
        timeout-minutes: 10

      - name: Storybook Build
        run: npm run build-storybook

      - name: Pack Library
        # Give this step an ID so we can reference its output
        id: pack_library
        run: |
          # Run npm pack and capture the output filename (relative to current dir)
          tgz_filename=$(npm pack | tail -n 1)
          # rename from the default packed name to PACKED_ARTIFACT_NAME so that we don't need to guess the name later.
          # artifact upload/download in GitHub has a 'name' property but that's the artifact name, not the file name.
          mv $tgz_filename ${{ env.PACKED_ARTIFACT_NAME }}
          echo "Packed library file: $tgz_filename renamed to ${{ env.PACKED_ARTIFACT_NAME }}"
          echo "tgz_name=${{ env.PACKED_ARTIFACT_NAME }}" >> $GITHUB_OUTPUT

      - name: Upload Packed Library Artifact
        uses: actions/upload-artifact@v4
        with:
          # This is the "artifact name", it's not a file name. The file name remains original.
          name: ${{ env.PACKED_ARTIFACT_NAME }}
          # Upload the file specified by the output of the 'pack_library' step
          path: ${{ steps.pack_library.outputs.tgz_name }}
          retention-days: 14

      # Now that we know all the tests are passing, let's report code coverage
      - name: Upload coverage report to Codecov
        uses: codecov/codecov-action@v5
        with:
          slug: recharts/recharts
          files: ./coverage/coverage-final.json
          token: ${{ secrets.CODECOV_TOKEN }}

      - name: Upload bundle analysis report to Codecov
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: node ./scripts/upload-bundle-analysis.js

      # Chromatic gives us only this many free credits per month
      # so let's publish only at the end so that we don't waste them when we know we can't merge from the previous steps anyway.
      - name: Publish visual regression tests to Chromatic
        if: ${{ env.ENCRYPTED_CHROMATIC_TOKEN }}
        # Chromatic action from https://www.chromatic.com/docs/github-actions
        uses: chromaui/action@latest
        # Chromatic GitHub Action options
        with:
          # ðŸ‘‡ Chromatic projectToken, refer to the manage page to obtain it.
          projectToken: ${{ secrets.CHROMATIC_PROJECT_TOKEN }}
          # Let's say that we don't want to use our Chromatic credits for PRs from dependabot
          skip: 'dependabot/**'

  integration_tests:
    name: Test ${{ matrix.test_dir }}
    runs-on: ubuntu-latest
    needs: [list_integration_tests, build_test_pack]
    strategy:
      # Allow all integration tests to run even if one fails
      fail-fast: false
      matrix:
        # Dynamically generate the matrix from the JSON output of the previous job
        test_dir: ${{ fromJson(needs.list_integration_tests.outputs.directories) }}
    steps:
      - name: Checkout Integration Tests Repository
        uses: actions/checkout@v4
        with:
          repository: recharts/recharts-integ # Checkout the test repo again but this time all directories and files

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Download Packed Library Artifact
        uses: actions/download-artifact@v4
        with:
          # name is not the filename, it's the "artifact name". The actual filename is the original of what was uploaded.
          name: ${{ env.PACKED_ARTIFACT_NAME }}
          # path is the directory where the artifact will be downloaded
          # so the full path to the artifact will be ${{ runner.temp }}/${{ env.PACKED_ARTIFACT_NAME }}
          path: ${{ runner.temp }}

      - name: Run Test
        # Use the output from the 'pack_library' step
        run: ./run-test.sh ${{ matrix.test_dir }} "file:${{ runner.temp }}/${{ env.PACKED_ARTIFACT_NAME }}"

  vr_tests:
    name: Visual Regression Tests
    permissions:
      contents: read
      pages: write
      id-token: write
      pull-requests: write
    runs-on: ubuntu-latest
    needs: [build_test_pack]
    env:
      # GH_TOKEN is needed to use `gh` CLI to comment on the PR
      GH_TOKEN: ${{ github.token }}
    steps:
      - name: Checkout Recharts Repository
        uses: actions/checkout@v4
        with:
          repository: recharts/recharts # Checkout the main repo again but this time all directories and files

      - name: Sanitize branch name
        # The branch name is used in the URL for the report.
        # It needs to be sanitized to remove characters that are not URL-friendly.
        # This step creates a GITHUB_ENV variable so it can be reused in later steps.
        run: |
          BRANCH_NAME=${{ github.head_ref || github.ref_name }}
          # Sanitize branch name for URL
          SANITIZED_BRANCH_NAME=$(echo $BRANCH_NAME | sed 's/[^a-zA-Z0-9]/-/g')
          echo "SANITIZED_BRANCH_NAME=$SANITIZED_BRANCH_NAME" >> $GITHUB_ENV

      - name: Build Docker Image
        # The VR tests run inside a Docker container. This step builds the image.
        run: npm run test-vr:prepare

      - name: Run Visual Regression Tests
        id: vr_test_step
        run: npm run test-vr
        # Continue even if this step fails. This allows us to upload the report
        # and post a comment on the PR. The workflow will be failed in a later step.
        continue-on-error: true

      - name: Prepare VR report for publishing
        # This step only runs if the VR tests have failed to prevent overwriting reports from other PRs.
        if: steps.vr_test_step.outcome == 'failure'
        # The report is placed in a directory named after the sanitized branch name.
        # This allows us to have separate reports for each branch on GitHub Pages.
        # The test report is generated inside a Docker container by a root user.
        # We need to use sudo to move the report files.
        run: |
          REPORT_DIR=./gh-pages/vr-report/$SANITIZED_BRANCH_NAME
          mkdir -p $REPORT_DIR
          sudo mv ./test-vr/playwright-report/* $REPORT_DIR/

      - name: Upload Visual Regression Report artifact for Pages
        # This step only runs if the VR tests have failed to prevent overwriting reports from other PRs.
        if: steps.vr_test_step.outcome == 'failure'
        id: upload_vr_report
        # This action uploads the report as an artifact that can be deployed to GitHub Pages.
        uses: actions/upload-pages-artifact@v3
        with:
          # The root of the artifact will be the gh-pages directory so that the public URL can start with "vr-report".
          # Note: This setup will overwrite reports from other PRs if they run in parallel,
          # as we are not checking out the existing gh-pages branch content first.
          path: ./gh-pages

      - name: Deploy to GitHub Pages
        # This step only runs if the VR tests have failed.
        if: steps.vr_test_step.outcome == 'failure'
        id: deployment
        # This action deploys the artifact to GitHub Pages. This will erase all files from previous deployments, including other PRs.
        uses: actions/deploy-pages@v4

      - name: Add a comment with the VR report URL
        # This step only runs if the VR tests have failed and the event is a pull request.
        if: steps.vr_test_step.outcome == 'failure' && github.event_name == 'pull_request'
        # The artifact from `upload-pages-artifact` is named `github-pages` by default.
        # We construct a URL to download it for manual inspection.
        run: |
          REPORT_URL=${{ steps.deployment.outputs.page_url }}vr-report/$SANITIZED_BRANCH_NAME
          ARTIFACT_URL="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}/artifacts/${{ steps.upload_vr_report.outputs.artifact_id }}"
          COMMENT_BODY=$(cat <<EOF
          Visual Regression tests failed.

          - **Live Report URL:** $REPORT_URL
            *This URL is temporary and may be overwritten by other PRs. If that happens, download the artifact:*

          - **Artifact Download:** [Download report artifact]($ARTIFACT_URL)
            *This link provides a stable copy of the report for this specific run.*
          EOF
          )
          gh pr comment ${{ github.event.pull_request.number }} --body "$COMMENT_BODY"

      - name: Fail workflow if tests failed
        # This step ensures that the entire job fails if the VR tests have failed.
        # This is necessary because of `continue-on-error: true` in the test step.
        # A failing job will block the PR from being merged.
        if: steps.vr_test_step.outcome == 'failure'
        run: exit 1
