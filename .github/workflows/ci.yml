# This workflow runs all CI steps within a single job.

name: Node.js CI - Single Job

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - 3.x

env:
  NODE_VERSION: 20.x
  # Define the path where the main repository code will be checked out
  RECHARTS_PATH: 'recharts'
  # Define the path where the integration test repository code will be checked out
  INTEG_PATH: 'recharts-integ'

jobs:
  ci:
    name: Build, Test, Pack, and Integrate
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout Main Repository
      - name: Checkout Recharts Repository
        uses: actions/checkout@v4
        with:
          path: ${{ env.RECHARTS_PATH }}

      # Step 2: Checkout Integration Tests Repository
      - name: Checkout Integration Tests Repository
        uses: actions/checkout@v4
        with:
          repository: recharts/recharts-integ
          path: ${{ env.INTEG_PATH }}

      # Step 3: Setup Node.js Environment
      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          # Cache depends on the lock file within the checked-out path
          cache-dependency-path: '${{ env.RECHARTS_PATH }}/package-lock.json'

      # Step 4: Install Main Dependencies
      - name: Install Dependencies
        working-directory: ./${{ env.RECHARTS_PATH }}
        run: npm ci

      # Step 5: Build
      - name: Build
        working-directory: ./${{ env.RECHARTS_PATH }}
        run: npm run build

      # Step 6: Run Unit Tests
      - name: Unit Tests
        working-directory: ./${{ env.RECHARTS_PATH }}
        run: npm run test-coverage

      # Step 7: Run Type Checking
      - name: Typecheck
        working-directory: ./${{ env.RECHARTS_PATH }}
        run: npm run check-types

      # Step 8: Run Linting
      - name: Lint
        working-directory: ./${{ env.RECHARTS_PATH }}
        run: npm run lint

      # Step 9: Run Storybook Test
      - name: Storybook Test
        working-directory: ./${{ env.RECHARTS_PATH }}
        run: npm run test-storybook:ci

      # Step 10: Pack the Library
      # Give this step an ID so we can reference its output
      - name: Pack Library
        id: pack_library
        working-directory: ./${{ env.RECHARTS_PATH }}
        run: |
          # Run npm pack and capture the output filename
          tgz_filename=$(npm pack | tail -n 1)
          echo "Packed library file: $tgz_filename"
          # Make the filename available as an output variable for this step
          echo "tgz_filename=$tgz_filename" >> $GITHUB_OUTPUT

      # Step 11: Run Integration Tests
      # Note: If integration tests need their own `npm ci`, add that step here.
      - name: Run Integration Tests
        working-directory: ./${{ env.INTEG_PATH }}
        # Use the output from the 'pack_library' step
        # The path to the .tgz file is relative to the integration tests' working directory
        run: ./run-test.sh integrations-npm/ts-react18 ../${{ env.RECHARTS_PATH }}/${{ steps.pack_library.outputs.tgz_filename }}
