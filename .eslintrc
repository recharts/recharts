{
  "extends": [
    "eslint:recommended",
    "plugin:@typescript-eslint/recommended",
    "plugin:react/recommended",
    "plugin:react-hooks/recommended",
    "eslint-config-airbnb",
    "plugin:storybook/recommended",
    "plugin:prettier/recommended"
  ],
  "env": {
    "browser": true,
    "node": true,
    "jest": true
  },
  "parser": "@typescript-eslint/parser",
  "plugins": ["react", "@typescript-eslint", "eslint-comments"],
  "rules": {
    "eslint-comments/no-unused-disable": "error",
    "prettier/prettier": [
      "error",
      {
        "printWidth": 120,
        "semi": true,
        "singleQuote": true,
        "tabWidth": 2,
        "useTabs": false,
        "trailingComma": "all",
        "arrowParens": "avoid",
        "endOfLine": "auto"
      }
    ],
    "import/extensions": "off",
    "valid-jsdoc": [
      "error",
      {
        "requireReturnType": false,
        "requireParamType": false
      }
    ],
    "react/no-did-update-set-state": "warn",
    "react/jsx-no-constructed-context-values": "warn",
    "react/no-unused-class-component-methods": "off",
    "react/sort-comp": "off",
    "react/jsx-uses-react": "error",
    "react/jsx-uses-vars": "error",
    "react/react-in-jsx-scope": "error",
    "react/jsx-filename-extension": ["error", { "extensions": [".ts", ".tsx", ".js", ".jsx"] }],

    "no-var": "error",
    "react/jsx-no-bind": "error",

    "no-unused-vars": "off",
    "one-var": ["error", { "uninitialized": "always" }],
    "one-var-declaration-per-line": ["error", "initializations"],
    "no-plusplus": "off",
    "no-bitwise": "off",
    // We have typescript, we don't need prop-types
    "react/prop-types": "off",
    "react/no-unused-prop-types": "off",
    // TODO enable class-methods-use-this with ignoreClassesWithImplements once we bump to eslint 9.24+
    // https://eslint.org/blog/2025/04/eslint-v9.24.0-released/
    // "class-methods-use-this": ["warn", { "ignoreClassesWithImplements": "public-fields" }],
    "class-methods-use-this": "warn",
    "import/no-extraneous-dependencies": [
      "error",
      {
        "devDependencies": true
      }
    ],
    "max-len": ["off"],
    "prefer-destructuring": "error",
    "object-curly-newline": "off",
    "function-paren-newline": "off",
    "react/require-default-props": "off",
    "no-restricted-globals": "error",
    "react/default-props-match-prop-types": "off",
    "react/function-component-definition": "off",
    "react/no-array-index-key": "warn",
    "no-multi-assign": "off",
    "react/no-access-state-in-setstate": "off",
    "react/destructuring-assignment": ["off"],
    "react/jsx-closing-tag-location": "error",
    "react/no-unused-state": "error",
    "react/prefer-stateless-function": "error",
    "react/jsx-props-no-spreading": "off",
    "react/state-in-constructor": "off",
    "react/static-property-placement": "off",
    "import/prefer-default-export": "off",
    "import/no-named-as-default": "error",
    "import/no-cycle": "error",
    "import/no-default-export": "error",
    "import/no-import-module-exports": "error",
    "import/no-relative-packages": "error",
    "no-use-before-define": "off",
    "@typescript-eslint/no-use-before-define": ["error"],
    "@typescript-eslint/no-explicit-any": "off",
    "@typescript-eslint/explicit-module-boundary-types": "off",
    "@typescript-eslint/ban-types": "off",
    "@typescript-eslint/no-unused-vars": [
      "error",
      {
        "args": "after-used",
        "ignoreRestSiblings": true,
        "argsIgnorePattern": "^_"
      }
    ],
    "no-restricted-imports": [
      "error",
      {
        "paths": [
          {
            "name": "lodash",
            "message": "Import [module] from lodash/[module] instead"
          }
        ]
      }
    ],
    /*
     * Typescript already handles no-redeclare, so we don't need to enforce it with ESLint.
     * Also, Typescript handles it better because TS can handle function overloads
     * which ESLint doesn't.
     * See: https://typescript-eslint.io/rules/no-redeclare/
     */
    "no-redeclare": "off"
  },
  "overrides": [
    {
      "files": ["./test/**/*.tsx"],
      "rules": {
        "react/jsx-no-useless-fragment": "off"
      }
    },
    {
      "files": ["./storybook/**/*.stories.@(ts|tsx)", "./storybook/**/*.@(ts|tsx)", "*.js"],
      "rules": {
        "no-useless-constructor": "off",
        "import/no-default-export": "off",
        "react-hooks/rules-of-hooks": "off"
      }
    },
    {
      "files": ["src/state/*Slice.ts", "test/**/*.spec.tsx"],
      // param-reassign is allowed in slices following Redux recommendation: https://redux-toolkit.js.org/usage/immer-reducers#linting-state-mutations
      "rules": { "no-param-reassign": ["error", { "props": false }] }
    },
    {
      "files": ["scripts/*.js"],
      "rules": {
        "@typescript-eslint/no-require-imports": "off",
        "no-console": "off"
      }
    }
  ],
  "settings": {
    "import/resolver": {
      "node": {
        "extensions": [".js", ".jsx", ".ts", ".tsx"]
      }
    }
  }
}
